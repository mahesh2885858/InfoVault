name: 'android-build'

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Install npm dependencies
      - name: Install npm dependencies
        run: |
          npm install --force

      # Decode and save keystore
      - name: Decode and save keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/my-upload-key.keystore

      - name: Run Codegen
        run: |
          cd android && ./gradlew generateCodegenArtifactsFromSchema

      # Build Android Release
      - name: Build Android Release
        run: |
          cd android && ./gradlew assembleRelease

      # Upload Artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/

      # Extract version from build.gradle
      - name: Extract version
        id: version
        run: |
          VERSION_NAME=$(grep "versionName" android/app/build.gradle | awk '{print $2}' | tr -d '"')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT

        # Check if release already exists
      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "v${{ steps.version.outputs.version_name }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # Create GitHub Release if not exists
      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version_name }}
          name: Release v${{ steps.version.outputs.version_name }}
          files: android/app/build/outputs/apk/release/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
